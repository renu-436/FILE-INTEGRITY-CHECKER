
import hashlib
import json
import os
# ====== CONFIGURATION ======
MONITOR_DIR = "files_to_monitor"   # Directory to monitor
HASH_DB = "file_hashes.json"       # File to store hash data
HASH_ALGORITHM = "sha256"          # You can change to md5, sha1, etc.
# ====== FUNCTION: Generate file hash ======
def get_file_hash(file_path):
    """Compute the hash of a given file using SHA-256."""
    hash_func = hashlib.new(HASH_ALGORITHM)
    with open(file_path, "rb") as f:
        while chunk := f.read(4096):
            hash_func.update(chunk)
    return hash_func.hexdigest()
# ====== FUNCTION: Create or update hash database ======
def generate_baseline():
    """Generate baseline hash values for all files."""
    file_hashes = {}
    for root, _, files in os.walk(MONITOR_DIR):
        for file in files:
            path = os.path.join(root, file)
            file_hashes[path] = get_file_hash(path)

    with open(HASH_DB, "w") as f:
        json.dump(file_hashes, f, indent=4)

    print(f"[+] Baseline created and saved to '{HASH_DB}'.")


# ====== FUNCTION: Monitor for changes ======
def check_integrity():
    """Compare current file hashes with baseline to detect changes."""
    if not os.path.exists(HASH_DB):
        print("[-] No baseline found. Run 'generate_baseline()' first.")
        return

    with open(HASH_DB, "r") as f:
        old_hashes = json.load(f)

    new_hashes = {}
    for root, _, files in os.walk(MONITOR_DIR):
        for file in files:
            path = os.path.join(root, file)
            new_hashes[path] = get_file_hash(path)

    # Detect changes
    modified = []
    added = []
    deleted = []

    for path in old_hashes:
        if path not in new_hashes:
            deleted.append(path)
        elif old_hashes[path] != new_hashes[path]:
            modified.append(path)

    for path in new_hashes:
        if path not in old_hashes:
            added.append(path)

    # Report
    print("\n=== FILE INTEGRITY REPORT ===")
    if not (modified or added or deleted):
        print("No changes detected. All files are intact.")
    else:
        if modified:
            print("\n Modified files:")
            for f in modified: print(f"   - {f}")
        if added:
            print("\nNew files added:")
            for f in added: print(f"   - {f}")
        if deleted:
            print("\nDeleted files:")
            for f in deleted: print(f"   - {f}")

    # Update hash database after checking (optional)
    with open(HASH_DB, "w") as f:
        json.dump(new_hashes, f, indent=4)


# ====== MAIN ======
if _name_ == "_main_":
    print("File Integrity Checker\n1. Generate Baseline\n2. Check Integrity")
    choice = input("Enter your choice (1/2): ").strip()

    if choice == "1":
        generate_baseline()
    elif choice == "2":
        check_integrity()
    else:
        print("Invalid choice.")
